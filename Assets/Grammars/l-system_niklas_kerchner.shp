// An L-system from Niklas, Kerchner, 1984, Paleobiology as defined in:
// Eloy, 2011, Leonardoâ€™s Rule, Self-Similarity, and Wind-Induced Stresses in Trees.

#include "l-system_header.shp"

param stochastic = true;

param branching_probability = 0.98;
param leonardo_exponent = 1.8;  // 1.92 < leo_exponent < 2.3
const wr = 1.0 / pow(2.0, 1.0 / leonardo_exponent);

param n = 11;            // Number of derivation iterations
param init_l = 9.0;      // Initial branch length
param init_w = 3.3;      // Initial branch width

param theta_1 = -20.0;   // Branching angle 1
param theta_2 = 40.0;    // Branching angle 2
param gamma = 100.0;     // Divergence angle
param angle_std = 10;    // Angle standard deviation
param r_1 = 0.75;        // Contraction ratio 1
param r_2 = 0.85;        // Contraction ratio 2
param r_std = 0.1;       // Contraction ratio standard deviation

// Values for the non-stochastic version in the paper:
// param theta_1 = -15;  // Branching angle 1
// param theta_2 = 30;   // Branching angle 2
// param gamma = 120;    // Divergence angle
// param r_1 =  0.75;    // Contraction ratio 1
// param r_2 =  0.75;    // Contraction ratio 2

rule Axiom :: !stochastic = {
  color("#664433")
  materialName("wood")

  Branch(init_l, init_w, n)
};

rule Axiom :: stochastic = {
  color("#664433")
  materialName("wood")

  BranchStochastic(init_l, init_w, n)
};

rule Branch(l, w, n) :: n == 0 = {};
rule Branch(l, w, n) :: n > 0  = {
  ^exclamation(w)
  ^F(l)
  [
    ^ampersand(theta_1)
    ^slash(gamma)
    Branch(l * r_1, w * wr, n - 1)
  ]
  [
    ^ampersand(theta_2)
    ^slash(gamma)
    Branch(l * r_2, w * wr, n - 1)
  ]
};

rule BranchStochastic(l, w, n) :: n == 0 = {};
rule BranchStochastic(l, w, n) : branching_probability :: n > 0  = {
  ^exclamation(w)
  ^F(l)
  [
    ^ampersand(rand_normal(theta_1, angle_std))
    ^slash(rand_normal(gamma, angle_std))
    Branch(l * rand_normal(r_1, r_std), w * wr, n - 1)
  ]
  [
    ^ampersand(rand_normal(theta_2, angle_std))
    ^slash(rand_normal(gamma, angle_std))
    Branch(l * rand_normal(r_2, r_std), w * wr, n - 1)
  ]
};
rule BranchStochastic(l, w, n) : 1.0 - branching_probability :: n > 0  = {
  ^exclamation(w)
  ^F(l)
};

