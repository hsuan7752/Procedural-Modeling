// Shape Modeling Language (ShapeML)
// Copyright (C) 2019  Stefan Lienhard
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

#include "test_color_palette.shp"

// Different sized and colored boxes
const box_1 = { color(color_1) Box1_ };
const box_2 = { scaleY(1.1) color(color_2) Box2_ };
const box_3 = { scaleY(1.2) color(color_3) Box3_ };
const box_4 = { scaleY(1.3) color(color_4) Box4_ };
const box_5 = { scaleY(1.4) color(color_5) Box5_ };

// Create alternating boxes of same color.
rule Alternate(box) :: index % 2 == 0 = { ^box };
rule Alternate(box) :: index % 2 == 1 = { scaleY(1.2) ^box };

rule Axiom = {
  size(10, 1, 1)
  cube


  ////////////////////////////////////////
  // Non repeating splits

  splitX("fff", 2, box_1, 4, box_2, 3, box_3) translateZ(2)

  splitX("ffs", 2, box_1, 4, box_2, 3, box_3) translateZ(2)

  splitX("fss", 2, box_1, 4, box_2, 3, box_3) translateZ(2)

  splitX("sss", 2, box_1, 4, box_2, 3, box_3) translateZ(2)

  translateZ(2)


  ////////////////////////////////////////
  // Repeat splits

  splitRepeatX(1, { Alternate(box_1) }) translateZ(2)
  // This is identical to the one above, but still a good test.
  // splitX("(s)", 1, { Alternate(box_1) }) translateZ(2)

  splitRepeatX(0.95, { Alternate(box_1) }) translateZ(2)
  // This is identical to the one above, but still a good test.
  // splitX("(s)", 0.95,  { Alternate(box_1) }) translateZ(2)

  splitX("(f)", 0.95, { Alternate(box_1) }) translateZ(2)

  translateZ(2)


  ////////////////////////////////////////
  // Alternating splits

  splitX("(ss)", 0.9, box_1, 2.1, box_2) translateZ(2)

  splitX("(fs)", 0.9, box_1, 2.1, box_2) translateZ(2)

  splitX("(sf)", 0.9, box_1, 2.1, box_2) translateZ(2)

  splitX("(ff)", 0.9, box_1, 2.1, box_2) translateZ(2)

  translateZ(2)


  ////////////////////////////////////////
  // ABA splits

  splitX("(ss)s", 0.7, box_2, 2, box_3, 0.7, box_2) translateZ(2)
  // This is identical to the one above, but still a good test.
  // splitX("s(ss)", 0.7, box_2, 2, box_3, 0.7, box_2) translateZ(2)

  splitX("(fs)f", 0.7, box_2, 2, box_3, 0.7, box_2) translateZ(2)
  // This is identical to the one above, but still a good test.
  // splitX("f(sf)", 0.7, box_2, 2, box_3, 0.7, box_2) translateZ(2)

  splitX("(sf)s", 0.7, box_2, 2, box_3, 0.7, box_2) translateZ(2)
  // This is identical to the one above, but still a good test.
  // splitX("s(fs)", 0.7, box_2, 2, box_3, 0.7, box_2) translateZ(2)

  splitX("(ff)f", 0.7, box_2, 2, box_3, 0.7, box_2) translateZ(2)
  // This is identical to the one above, but still a good test.
  // splitX("f(ff)", 0.7, box_2, 2, box_3, 0.7, box_2) translateZ(2)

  translateZ(2)


  ////////////////////////////////////////
  // Splits with two inner patterns

  splitX("(s)(s)", 0.7, { Alternate(box_3) }, 2, { Alternate(box_4) }) translateZ(2)

  splitX("(f)(s)", 0.7, { Alternate(box_3) }, 2, { Alternate(box_4) }) translateZ(2)

  splitX("(s)(f)", 0.7, { Alternate(box_3) }, 2, { Alternate(box_4) }) translateZ(2)

  splitX("(f)(f)", 0.7, { Alternate(box_3) }, 2, { Alternate(box_4) }) translateZ(2)

  translateZ(2)


  ////////////////////////////////////////
  // Crazy split pattern

  splitX("f(sfs)f(sfsssf)sf(sfs)f",
    0.3, box_1,
      0.2, box_4,
      0.1, box_3,
      0.2, box_2,
    0.5, box_1,
      0.2, box_2,
      0.1, box_3,
      0.2, box_4,
      0.3, box_5,
      0.2, box_4,
      0.1, box_3,
    0.2, box_2,
    0.5, box_1,
      0.2, box_2,
      0.1, box_3,
      0.2, box_4,
    0.3, box_1
  )
};

