// An L-system of an Acacia tree from:
// Talton et al., 2011, Metropolis Procedural Modeling.
//
// Unfortunately the textures used in the paper are missing.

#include "l-system_header.shp"

param branch_density  = 5;
param two_branch_prob = 1;

const initial_width   = 0.07;
const upward_tendency = 0.6;

func  angle_left  = rand_uniform(25, 60);
func  angle_right = rand_uniform(25, 60);
const phylo_angle = 137.5;

// Stem length variation: 1 no variation, 0.5 is nice, 0.1 wild
param stem_length_variation = 0.6;

const trunk_length = 4.0;

const scale_left   = 0.89;
const scale_right  = 0.87;

// Leaves
const leaf_upward_tendency =  2.4;
const leaf_gravity         = -0.4;
const one_leaf_prob        =  0.2;

const tree_age = 25;

const init_budget = (tree_age * tree_age * branch_density);

func StemLength(s) = rand_uniform(s * stem_length_variation, s);

func Branch(len, n, budget, t) = {
  turnYAxisPerpToVec(0, 0.15 * (tree_age - n), 0)
  set("new_width", initial_width * exp(log(budget) / 2.2))
  set("wr", new_width / size_x)
  ^F(StemLength(len))
  ^exclamation(new_width)
  L(len, budget)
};


rule Axiom = {
  color(0.6, 0.3, 0.1)
  ^exclamation(initial_width * exp(log(init_budget) / 2.2))
  ^plus(rand_normal(0, 10))
  ^caret(rand_normal(0, 10))
  ^slash(phylo_angle + rand_normal(90, 90))
  ^Branch(trunk_length, tree_age, init_budget, 1)
  // The 10 here is a global scaling factor.
  A(tree_age, 10, phylo_angle, 1, init_budget)
};


// Terminate branch
rule A(n, s, pa, asc, budget) :: budget < 0.3 || n == 0 = {};
rule A(n, s, pa, asc, budget) : 0.01 = {};

// Two new branches
func PROB_TWO(budget, n) = (two_branch_prob + (1 - two_branch_prob) * budget / (exp(log(2) * n)));

rule A(n, s, pa, asc, budget) : PROB_TWO(budget, n) * 0.4 :: budget >= 1.3 && n > 0 = {
  ^slash(pa + rand_uniform(-25, 25))
  turnYAxisToVec(0, upward_tendency, 0)
  ^Branch(s, n, budget, 2)
  [
    ^minus(angle_left * asc)
    A(n - 1, s * scale_left, pa, -1 * asc, (budget - 1) * 0.5)
  ]
  ^plus(angle_right * asc)
  A(n - 1, s * scale_right, pa, -1 * asc, (budget - 1) * 0.5)
};

rule A(n, s, pa, asc, budget) : PROB_TWO(budget, n) * 0.3 :: budget >= 1.3 && n > 0 = {
  ^slash(pa + rand_uniform(-25, 25))
  turnYAxisToVec(0, upward_tendency, 0)
  ^Branch(s, n, budget, 2)
  [
    ^minus(angle_left * asc * 0.9)
    A(n - 1, s * scale_left, pa, -1* asc, (budget - 1) * 0.6)
  ]
  ^plus(angle_right * asc * 1.1)
  A(n - 1, s * scale_right, pa, -1 * asc, (budget - 1) * 0.4)
};

rule A(n, s, pa, asc, budget) : PROB_TWO(budget, n) * 0.2 :: budget >= 1.3 && n > 0 = {
  ^slash(pa + rand_uniform(-25, 25))
  turnYAxisToVec(0, upward_tendency, 0)
  ^Branch(s, n, budget, 2)
  [
    ^minus(angle_left * asc * 0.8)
    A(n - 1, s * scale_left, pa, -1* asc, (budget - 1) * 0.7)
  ]
  ^plus(angle_right * asc * 1.2)
  A(n - 1, s * scale_right, pa, -1 * asc, (budget - 1) * 0.3)
};

rule A(n, s, pa, asc, budget) : PROB_TWO(budget, n) * 0.1 :: budget >= 1.3 && n > 0 = {
  ^slash(pa + rand_uniform(-25, 25))
  turnYAxisToVec(0, upward_tendency, 0)
  ^Branch(s, n, budget, 2)
  [
    ^minus(angle_left * asc * 0.6)
    A(n - 1, s * scale_left, pa, -1* asc, (budget - 1) * 0.8)
  ]
  ^plus(angle_right * asc * 1.4)
  A(n - 1, s * scale_right, pa, -1 * asc, (budget - 1) * 0.2)
};

rule A(n, s, pa, asc, budget) : PROB_TWO(budget, n) * 0.05 :: budget >= 1.3 && n > 0 = {
  ^slash(pa + rand_uniform(-25, 25))
  turnYAxisToVec(0, upward_tendency, 0)
  ^Branch(s, n, budget, 2)
  [
    ^minus(angle_left * asc * 0.4)
    A(n - 1, s * scale_left, pa, -1* asc, (budget - 1) * 0.9)
  ]
  ^plus(angle_right * asc * 1.6)
  A(n - 1, s * scale_right, pa, -1 * asc, (budget - 1) * 0.1)
};

// One new branch
rule A(n, s, pa, asc, budget) : 1 - PROB_TWO(budget, n) :: budget >= 0.3 && n > 0 = {
  ^slash(pa + rand_uniform(-25, 25))
  turnYAxisToVec(0, upward_tendency * 0.5, 0)
  ^Branch(s, n, budget, 1)
  ^plus(angle_right)
  A(n - 1, s * scale_right, pa, asc, budget - 1)
};


// Leaves
rule L(s, n) :: n >= 5 = {};

rule L(s, n) : one_leaf_prob :: n < 5 = {
  color(0.1, 0.7, 0)
  [
    ^slash(180)
    ^caret(130)
    turnZAxisToVec(0, leaf_upward_tendency, 0)
    turnYAxisToVec(0, leaf_gravity, 0)
    ^Leafconnector(s * 0.3 * 1.1)
    Leaf(s * 0.7, s * 0.7)
  ]
};

rule L(s, n) : one_leaf_prob :: n < 5 = {
  color(0.1, 0.7, 0)
  [
    ^caret(130)
    turnZAxisToVec(0, leaf_upward_tendency, 0)
    turnYAxisToVec(0, leaf_gravity, 0)
    ^Leafconnector(s * 0.3 * 1.1)
    Leaf(s * 0.7, s * 0.7)
  ]
};

rule L(s, n) : 1 - 2 * one_leaf_prob :: n < 5 = {
  color(0.1, 0.7, 0)
  [
    ^caret(130)
    turnZAxisToVec(0, leaf_upward_tendency, 0)
    turnYAxisToVec(0, leaf_gravity, 0)
    ^Leafconnector(s * 0.3 * 1.1)
    Leaf(s * 0.7, s * 0.7)
  ]
  [
    ^slash(180)
    ^caret(130)
    turnZAxisToVec(0, leaf_upward_tendency, 0)
    turnYAxisToVec(0, leaf_gravity, 0)
    ^Leafconnector(s * 0.3 * 1.1)
    Leaf(s * 0.7, s * 0.7)
  ]
};

func Leafconnector(length) = {
  sizeY(length)
  [
    sizeX(0.05)
    sizeZ(0.05)
    translate(-0.5 * size_x, 0, -0.5 * size_z)
    cylinder(3, 1, 1)
    Leafconnector_
  ]
  translateY(length)
};

rule Leaf(width, height) = {
  size(width, 0.05, height)
  cube
  rotateX(90)
  translate(-0.5 * width, -0.025, -0.9 * height)
  Leaf_
};

