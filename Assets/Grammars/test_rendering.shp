// Shape Modeling Language (ShapeML)
// Copyright (C) 2019  Stefan Lienhard
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

#include "test_color_palette.shp"

const size = 5.0;
const distance = 7.0;

rule Axiom = {
  set("transparent", false)
  Grid
  translateX(8 * distance)
  set("transparent", true)
  Grid
};

rule Grid = {
  size(size, size, size)

  repeat(4, {
    set("color_idx", index)
    repeat(6, {
      set("shape_idx", index)
      translate(shape_idx * distance, 0, color_idx * distance)
      roughness(0.3)
      metallic(0.6)
      Shape
    })
  })
};

rule Shape :: shape_idx == 0 = {
  cube
  ColoredShape
};
rule Shape :: shape_idx >= 1 && shape_idx < 3 = {
  cylinder(16, 1, 1)
  ColoredShape
};
rule Shape :: shape_idx >= 3 && shape_idx < 6 = {
  sphere(16, 16)
  ColoredShape
};

rule ColoredShape :: color_idx == 0 = {
    color(color_3)
    OpaqueVsTransparent
};
rule ColoredShape :: color_idx == 1 = {
    color(color_4)
    OpaqueVsTransparent
};
rule ColoredShape :: color_idx == 2 = {
    color(color_5)
    OpaqueVsTransparent
};
rule ColoredShape :: color_idx == 3 = {
    color(color_6)
    OpaqueVsTransparent
};

rule OpaqueVsTransparent :: !transparent = {
    Instance_
};
rule OpaqueVsTransparent :: transparent = {
    color(color_r, color_g, color_b, 0.6)
    TransparentInstance_
};

