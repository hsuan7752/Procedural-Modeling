// Shape Modeling Language (ShapeML)
// Copyright (C) 2019  Stefan Lienhard
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

rule Axiom = {
  MakeOccluder

  repeat(1, {  // To get an 'index' for the shape.
    translate(1.0, 2.0, 3.0)
    scale(2.2, 0.0, 1.1)
    quad
    color(1, 0.1, 0.2, 0.5)
    roughness(0.5)
    metallic(0.5)
    reflectance(0.5)
    texture("assets/uv_test.png")
    materialName("test_material")
    set("test_attr", "Hello World")

    // Examples of all existing built-in functions and shape attributes
    BuiltInFunctions
    BuiltInShapeAttributes
  })
};

rule MakeOccluder = {
  size(4, 4, 4)
  cube
  octreeAdd
};

const mesh_uri = "assets/bunny.obj";

rule BuiltInFunctions = {
  printLn("Examples of built-in functions:")
  printLn("bool(100)): "                                  + bool(100))
  printLn("int(-3.5)): "                                  + int(-3.5))
  printLn("float(10)): "                                  + float(10))
  printLn("string(-3.5)): "                               + string(-3.5))
  printLn("rand_int(10, 20)): "                           + rand_int(10, 20))
  printLn("rand_uniform(2.0, 8.0): "                      + rand_uniform(2.0, 8.0))
  printLn("rand_normal(7.0, 2.0): "                       + rand_normal(7.0, 2.0))
  printLn("noise(0.1, 0.2, 0.3)): "                       + noise(0.1, 0.2, 0.3))
  printLn("noise(0.1, 0.2)): "                            + noise(0.1, 0.2))
  printLn("fBm(0.1, 0.2, 0.3, 4)): "                      + fBm(0.1, 0.2, 0.3, 4))
  printLn("fBm(0.1, 0.2, 0.3, 4, 2.0, 1.0)): "            + fBm(0.1, 0.2, 0.3, 4, 2.0, 1.0))
  printLn("fBm(0.1, 0.2, 4)): "                           + fBm(0.1, 0.2, 4))
  printLn("fBm(0.1, 0.2, 4, 2.0, 1.0)): "                 + fBm(0.1, 0.2, 4, 2.0, 1.0))
  printLn("abs(-3.5)): "                                  + abs(-3.5))
  printLn("ceil(3.5)): "                                  + ceil(3.5))
  printLn("floor(3.5)): "                                 + floor(3.5))
  printLn("round(3.5)): "                                 + round(3.5))
  printLn("sign(-3.5)): "                                 + sign(-3.5))
  printLn("fract(-3.4)): "                                + fract(-3.4))
  printLn("sin(90.0)): "                                  + sin(90.0))
  printLn("cos(180.0)): "                                 + cos(180.0))
  printLn("tan(45.0)): "                                  + tan(45.0))
  printLn("asin(-1.0)): "                                 + asin(-1.0))
  printLn("acos(-1.0)): "                                 + acos(-1.0))
  printLn("atan(-1.0)): "                                 + atan(-1.0))
  printLn("atan2(-1.0, -1.0)): "                          + atan2(-1.0, -1.0))
  printLn("sqrt(9.0): "                                   + sqrt(9.0))
  printLn("pow(3.0, 3.0): "                               + pow(3.0, 3.0))
  printLn("exp(1.0): "                                    + exp(1.0))
  printLn("log(10.0): "                                   + log(10.0))
  printLn("log10(1000.0): "                               + log10(1000.0))
  printLn("max(1, 2): "                                   + max(1, 2))
  printLn("min(10, 8.1): "                                + min(10, 8.1))
  printLn("clamp(1.0, 2.0, 3.0): "                        + clamp(1.0, 2.0, 3.0))
  printLn("step(2.0, 1.0): "                              + step(2.0, 1.0))
  printLn("smooth_step(1.0, 2.0, 1.2): "                  + smooth_step(1.0, 2.0, 1.2))
  printLn("lerp(2.0, 1.0, 0.2): "                         + lerp(2.0, 1.0, 0.2))
  printLn("pi: "                                          + pi)
  printLn("seed: "                                        + seed)
  printLn("mesh_info(\"" + mesh_uri + "\", \"size_x\"): " + mesh_info(mesh_uri, "size_x"))
  printLn("mesh_info(\"" + mesh_uri + "\", \"size_y\"): " + mesh_info(mesh_uri, "size_y"))
  printLn("mesh_info(\"" + mesh_uri + "\", \"size_z\"): " + mesh_info(mesh_uri, "size_z"))
  printLn("file_exists(\"" + mesh_uri + "\"): "           + file_exists(mesh_uri))
};

rule BuiltInShapeAttributes = {
  printLn("")
  printLn("Examples of built-in shape attributes:")
  printLn("size_x: "               + size_x)
  printLn("size_y: "               + size_y)
  printLn("size_z: "               + size_z)
  printLn("pos_x: "                + pos_x)
  printLn("pos_y: "                + pos_y)
  printLn("pos_z: "                + pos_z)
  printLn("pos_world_x: "          + pos_world_x)
  printLn("pos_world_y: "          + pos_world_y)
  printLn("pos_world_z: "          + pos_world_z)
  printLn("area: "                 + area)
  printLn("color_r: "              + color_r)
  printLn("color_g: "              + color_g)
  printLn("color_b: "              + color_b)
  printLn("color_a: "              + color_a)
  printLn("metallic: "             + metallic)
  printLn("roughness: "            + roughness)
  printLn("reflectance: "          + reflectance)
  printLn("texture: "              + texture)
  printLn("material_name: "        + material_name)
  printLn("index: "                + index)
  printLn("visible: "              + visible)
  printLn("depth: "                + depth)
  printLn("label: "                + label)
  printLn("get(\"test_attr\"): "   + get("test_attr"))
  printLn("occlusion: "            + occlusion)
  printLn("occlusion(\"Axiom\"): " + occlusion("Axiom"))
};

